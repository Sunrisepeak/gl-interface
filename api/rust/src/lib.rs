/* automatically generated by rust-bindgen 0.65.1 */

pub const M_PI: f64 = 3.141592653589793;
pub const GLI_TRUE: u32 = 1;
pub const GLI_FALSE: u32 = 0;
pub const DrawMode_GLI_POINTS: DrawMode = 0;
pub const DrawMode_GLI_LINES: DrawMode = 1;
pub const DrawMode_GLI_LINE_STRIP: DrawMode = 2;
pub const DrawMode_GLI_LINE_LOOP: DrawMode = 3;
pub const DrawMode_GLI_TRIANGLES: DrawMode = 4;
pub const DrawMode_GLI_TRIANGLE_FAN: DrawMode = 5;
pub type DrawMode = ::std::os::raw::c_uint;
pub const ColorMode_GLI_COL_ONE: ColorMode = 1;
pub const ColorMode_GLI_COL_MULTI: ColorMode = 2;
pub type ColorMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PointGLI {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_PointGLI() {
    const UNINIT: ::std::mem::MaybeUninit<PointGLI> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PointGLI>(),
        12usize,
        concat!("Size of: ", stringify!(PointGLI))
    );
    assert_eq!(
        ::std::mem::align_of::<PointGLI>(),
        4usize,
        concat!("Alignment of ", stringify!(PointGLI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PointGLI),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PointGLI),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PointGLI),
            "::",
            stringify!(z)
        )
    );
}
pub type VectorGLI = PointGLI;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ColorGLI {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[test]
fn bindgen_test_layout_ColorGLI() {
    const UNINIT: ::std::mem::MaybeUninit<ColorGLI> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ColorGLI>(),
        16usize,
        concat!("Size of: ", stringify!(ColorGLI))
    );
    assert_eq!(
        ::std::mem::align_of::<ColorGLI>(),
        4usize,
        concat!("Alignment of ", stringify!(ColorGLI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorGLI),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorGLI),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorGLI),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorGLI),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_1 {
    pub ORIGIN: PointGLI,
    pub RIGHT: PointGLI,
    pub LEFT: PointGLI,
    pub UP: PointGLI,
    pub DOWN: PointGLI,
    pub FRONT: PointGLI,
    pub BACK: PointGLI,
    pub RU: PointGLI,
    pub LU: PointGLI,
    pub LD: PointGLI,
    pub RD: PointGLI,
    pub UF: PointGLI,
    pub DF: PointGLI,
    pub DB: PointGLI,
    pub UB: PointGLI,
    pub RF: PointGLI,
    pub RB: PointGLI,
    pub LF: PointGLI,
    pub LB: PointGLI,
    pub RUF: PointGLI,
    pub RDF: PointGLI,
    pub RDB: PointGLI,
    pub RUB: PointGLI,
    pub LUF: PointGLI,
    pub LDF: PointGLI,
    pub LDB: PointGLI,
    pub LUB: PointGLI,
}
#[test]
fn bindgen_test_layout__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_bindgen_ty_1>(),
        324usize,
        concat!("Size of: ", stringify!(_bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ORIGIN) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(ORIGIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RIGHT) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(RIGHT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LEFT) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(LEFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UP) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(UP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DOWN) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(DOWN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FRONT) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(FRONT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BACK) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(BACK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RU) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(RU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LU) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(LU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LD) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(LD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RD) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(RD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UF) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(UF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DF) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(DF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DB) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(DB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UB) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(UB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RF) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(RF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RB) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(RB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LF) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(LF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LB) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(LB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RUF) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(RUF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RDF) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(RDF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RDB) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(RDB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RUB) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(RUB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LUF) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(LUF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LDF) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(LDF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LDB) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(LDB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LUB) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_1),
            "::",
            stringify!(LUB)
        )
    );
}
extern "C" {
    pub static GLI_POSITION: _bindgen_ty_1;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_2 {
    pub WHITE: ColorGLI,
    pub BLACK: ColorGLI,
    pub RED: ColorGLI,
    pub GREEN: ColorGLI,
    pub BLUE: ColorGLI,
    pub YELLOW: ColorGLI,
    pub CYAN: ColorGLI,
    pub MAGENTE: ColorGLI,
    pub GRAY: ColorGLI,
    pub ORANGE: ColorGLI,
    pub PURPLE: ColorGLI,
    pub BROWN: ColorGLI,
}
#[test]
fn bindgen_test_layout__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_bindgen_ty_2>(),
        192usize,
        concat!("Size of: ", stringify!(_bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(_bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WHITE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_2),
            "::",
            stringify!(WHITE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLACK) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_2),
            "::",
            stringify!(BLACK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RED) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_2),
            "::",
            stringify!(RED)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GREEN) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_2),
            "::",
            stringify!(GREEN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLUE) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_2),
            "::",
            stringify!(BLUE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).YELLOW) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_2),
            "::",
            stringify!(YELLOW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CYAN) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_2),
            "::",
            stringify!(CYAN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MAGENTE) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_2),
            "::",
            stringify!(MAGENTE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GRAY) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_2),
            "::",
            stringify!(GRAY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ORANGE) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_2),
            "::",
            stringify!(ORANGE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PURPLE) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_2),
            "::",
            stringify!(PURPLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BROWN) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_bindgen_ty_2),
            "::",
            stringify!(BROWN)
        )
    );
}
extern "C" {
    pub static GLI_COLORS: _bindgen_ty_2;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GraphicsDataGLI {
    pub mode: GraphicsDataGLI__bindgen_ty_1,
    pub vertexNums: ::std::os::raw::c_uint,
    pub vertices: *mut f32,
    pub colors: *mut f32,
    pub thickness: f32,
    pub filled: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GraphicsDataGLI__bindgen_ty_1 {
    pub draw: DrawMode,
    pub color: ColorMode,
}
#[test]
fn bindgen_test_layout_GraphicsDataGLI__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<GraphicsDataGLI__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GraphicsDataGLI__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(GraphicsDataGLI__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<GraphicsDataGLI__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(GraphicsDataGLI__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draw) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphicsDataGLI__bindgen_ty_1),
            "::",
            stringify!(draw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphicsDataGLI__bindgen_ty_1),
            "::",
            stringify!(color)
        )
    );
}
#[test]
fn bindgen_test_layout_GraphicsDataGLI() {
    const UNINIT: ::std::mem::MaybeUninit<GraphicsDataGLI> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GraphicsDataGLI>(),
        40usize,
        concat!("Size of: ", stringify!(GraphicsDataGLI))
    );
    assert_eq!(
        ::std::mem::align_of::<GraphicsDataGLI>(),
        8usize,
        concat!("Alignment of ", stringify!(GraphicsDataGLI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphicsDataGLI),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexNums) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphicsDataGLI),
            "::",
            stringify!(vertexNums)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertices) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphicsDataGLI),
            "::",
            stringify!(vertices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colors) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphicsDataGLI),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thickness) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphicsDataGLI),
            "::",
            stringify!(thickness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filled) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphicsDataGLI),
            "::",
            stringify!(filled)
        )
    );
}
extern "C" {
    pub fn gli_malloc(size: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn gli_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn gli_backend_init(extend: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn gli_backend_deinit();
}
extern "C" {
    pub fn gli_viewport(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gli_2d(size: f32, x: f32, y: f32);
}
extern "C" {
    pub fn gli_camera_pos(x: f32, y: f32, z: f32);
}
extern "C" {
    pub fn gli_camera_target(x: f32, y: f32, z: f32);
}
extern "C" {
    pub fn gli_camera_direction(direction: VectorGLI);
}
extern "C" {
    pub fn gli_camera_fov(fov: f32);
}
extern "C" {
    pub fn gli_camera_aspect(aspect: f32);
}
extern "C" {
    pub fn gli_camera_clipping(near: f32, far: f32);
}
extern "C" {
    pub fn gli_camera_update();
}
extern "C" {
    pub fn gli_clear(r: f32, g: f32, b: f32, a: f32);
}
extern "C" {
    pub fn gli_draw(gData: *mut GraphicsDataGLI);
}
extern "C" {
    pub fn gli_render();
}
extern "C" {
    pub fn gli_frame_buff() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn gli_sin(x: f32) -> f32;
}
extern "C" {
    pub fn gli_cos(x: f32) -> f32;
}
extern "C" {
    pub fn gli_view(pos: VectorGLI, target: VectorGLI, direction: VectorGLI);
}
extern "C" {
    pub fn gli_projection(fov: f32, aspect: f32, near: f32, far: f32);
}
extern "C" {
    pub fn gli_camera_rotation(angle: f32);
}
extern "C" {
    #[doc = " - graphics api"]
    pub fn gli_point(p: PointGLI, col: ColorGLI, size: f32);
}
extern "C" {
    pub fn gli_line(p1: PointGLI, p2: PointGLI, col: ColorGLI, thickness: f32);
}
extern "C" {
    pub fn gli_line_base(
        p1: PointGLI,
        col1: ColorGLI,
        p2: PointGLI,
        col2: ColorGLI,
        thickness: f32,
    );
}
extern "C" {
    pub fn gli_line_strip(
        points: *mut PointGLI,
        pNum: ::std::os::raw::c_int,
        col: ColorGLI,
        thickness: f32,
    );
}
extern "C" {
    pub fn gli_line_strip_base(
        points: *mut PointGLI,
        pNum: ::std::os::raw::c_int,
        col: ColorGLI,
        thickness: f32,
    );
}
extern "C" {
    pub fn gli_triangle(p1: PointGLI, p2: PointGLI, p3: PointGLI, col: ColorGLI, thickness: f32);
}
extern "C" {
    pub fn gli_triangle_filled(p1: PointGLI, p2: PointGLI, p3: PointGLI, col: ColorGLI);
}
extern "C" {
    pub fn gli_triangle_base(
        p1: PointGLI,
        col1: ColorGLI,
        p2: PointGLI,
        col2: ColorGLI,
        p3: PointGLI,
        col3: ColorGLI,
        filled: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gli_rectangle(p1: PointGLI, p2: PointGLI, col: ColorGLI, thickness: f32);
}
extern "C" {
    pub fn gli_rectangle_filled(p1: PointGLI, p2: PointGLI, col: ColorGLI);
}
extern "C" {
    pub fn gli_rectangle_base(
        p1: PointGLI,
        p2: PointGLI,
        colRD: ColorGLI,
        colRU: ColorGLI,
        colLU: ColorGLI,
        colLD: ColorGLI,
        filled: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    pub fn gli_circle(
        center: PointGLI,
        radius: f32,
        normal: VectorGLI,
        col: ColorGLI,
        segmentsNum: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    pub fn gli_circle_filled(
        center: PointGLI,
        radius: f32,
        normal: VectorGLI,
        col: ColorGLI,
        segmentsNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gli_ngon(
        center: PointGLI,
        radius: f32,
        col: ColorGLI,
        segmentsNum: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    pub fn gli_ngon_filled(
        center: PointGLI,
        radius: f32,
        col: ColorGLI,
        segmentsNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gli_polygon(
        points: *mut PointGLI,
        pNums: ::std::os::raw::c_int,
        col: ColorGLI,
        thickness: f32,
    );
}
extern "C" {
    pub fn gli_polygon_filled(points: *mut PointGLI, pNums: ::std::os::raw::c_int, col: ColorGLI);
}
extern "C" {
    pub fn gli_bezier_curve(
        points: *mut PointGLI,
        pNums: ::std::os::raw::c_int,
        col: ColorGLI,
        segmentsNum: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    pub fn gli_coordinate();
}
extern "C" {
    pub fn gli_space();
}
extern "C" {
    #[doc = " helper"]
    pub fn gli_sqrt(x: f32) -> f32;
}
extern "C" {
    pub fn gli_fabs(x: f32) -> f32;
}
extern "C" {
    pub fn gli_pos_normalization(p1: *mut PointGLI, p2: *mut PointGLI);
}
extern "C" {
    pub fn gli_generate_circle_vertices(
        vertices: *mut f32,
        radius: f32,
        numSegments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gli_de_casteljau(points: *mut PointGLI, nums: f32, t: f32) -> PointGLI;
}
extern "C" {
    pub fn gli_pos_obj(x: f32, y: f32, z: f32) -> PointGLI;
}
extern "C" {
    pub fn gli_pos_plus(p1: PointGLI, p2: PointGLI) -> PointGLI;
}
extern "C" {
    pub fn gli_pos_minus(p1: PointGLI, p2: PointGLI) -> PointGLI;
}
extern "C" {
    pub fn gli_pos_scale(p1: PointGLI, scale: f32) -> PointGLI;
}
extern "C" {
    pub fn gli_col_obj(x: f32, y: f32, z: f32) -> PointGLI;
}
extern "C" {
    pub fn gli_orthogonal_basis(normal: *const f32, u: *mut f32, v: *mut f32);
}
extern "C" {
    pub fn gli_color_obj(r: f32, g: f32, b: f32, a: f32) -> ColorGLI;
}
extern "C" {
    pub fn gli_pos_add(p1: PointGLI, p2: PointGLI) -> PointGLI;
}
